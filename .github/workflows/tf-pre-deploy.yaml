name: Terraform Pre Deploy - Lind and Test

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      terraform_version:
        type: string
        required: false
        default: '1.1.4'
    secrets:
      GOOGLE_APPLICATION_CREDENTIALS:
        required: true

jobs:
  lint-and-test:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Download Issue Templatefile
        if: github.event_name != 'pull_request'
        run: curl https://raw.githubusercontent.com/t3n/github-actions/main/.github/templates/approve-deployment.md -o ./.github/approve-deployment.md

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ inputs.terraform_version }}
      
      - name: Check terraform version
        run: terraform version

      - name: Terraform Fmt
        id: fmt
        run: terraform fmt -check -diff

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Select Workspace
        run: terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }}
        continue-on-error: true

      - name: Terraform Show Workspace
        id: workspace
        run: terraform workspace show

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file _${{ inputs.environment }}.json -no-color -lock-timeout=20s -out plan_${{ inputs.environment }}.out

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v5
        env:
          format_out: ${{ steps.fmt.outputs.stdout }}
          format_err: ${{ steps.fmt.outputs.stderr }}
          init_out: ${{ steps.init.outputs.stdout }}
          init_err: ${{ steps.init.outputs.stderr }}
          workspace_out: ${{ steps.workspace.outputs.stdout }}
          workspace_err: ${{ steps.workspace.outputs.stderr }}
          validate_out: ${{ steps.validate.outputs.stdout }}
          validate_err: ${{ steps.validate.outputs.stderr }}
          plan: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const CODE_BLOCK = '```';
            const fmt_result = '${{ steps.fmt.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
            const init_result = '${{ steps.init.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
            const validate_result = '${{ steps.validate.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
            const workspace_result = '${{ steps.workspace.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
            const plan_result = '${{ steps.plan.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';

            const output = `
            ### ${ fmt_result } Terraform Format and Style üé®
            <details><summary>Logs</summary>
            Output

            ${ CODE_BLOCK }diff
            ${ process.env.format_out }
            ${ CODE_BLOCK }

            Errors

            ${ CODE_BLOCK }
            ${ process.env.format_err }
            ${ CODE_BLOCK }
            </details> <!-- End Format Logs -->

            ### ${ init_result } Terraform Initialization ‚öôÔ∏è
            <details><summary>Logs</summary>
            Output

            ${ CODE_BLOCK }
            ${ process.env.init_out }
            ${ CODE_BLOCK }

            Errors

            ${ CODE_BLOCK }
            ${ process.env.init_err }
            ${ CODE_BLOCK }
            </details> <!-- End Init Logs -->

            ### ${ validate_result } Terraform Validation ü§ñ
            <details><summary>Logs</summary>
            Output
            
            ${ CODE_BLOCK }
            ${ process.env.validate_out }
            ${ CODE_BLOCK }
            
            Errors
            
            ${ CODE_BLOCK }
            ${ process.env.validate_err }
            ${ CODE_BLOCK }
            </details> <!-- End Validate Logs -->

            ### ${ workspace_result } Terraform show Workspace üëÄ
            <details><summary>Logs</summary>
            Output
            
            ${ CODE_BLOCK }
            ${ process.env.workspace_out }
            ${ CODE_BLOCK }
            
            Errors
            
            ${ CODE_BLOCK }
            ${ process.env.workspace_err }
            ${ CODE_BLOCK }
            </details> <!-- End Workspace Logs -->

            ### ${ plan_result } Terraform Plan üìñ
            <details><summary>Logs</summary>
            
            ${ CODE_BLOCK }terraform
            ${ process.env.plan }
            ${ CODE_BLOCK }
            </details>
        
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
          
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform errored
        if: |
          steps.fmt.outcome == 'failure' ||
          steps.init.outcome == 'failure' ||
          steps.validate.outcome == 'failure' ||
          steps.plan.outcome == 'failure'
        run: exit 1
